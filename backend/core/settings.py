# /backend/core/settings.py
"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
# CHANGE: Optimized for production deployment
# Try multiple .env file locations for flexibility
env_paths = [
    os.path.join(os.path.dirname(__file__), '../../.env'),  # Docker mode
    os.path.join(BASE_DIR.parent, '.env'),  # Production mode (parent of backend/)
    os.path.join(BASE_DIR, '.env'),  # Alternative location
]

for env_path in env_paths:
    if os.path.exists(env_path):
        load_dotenv(env_path)
        print(f"üîß Loaded environment from: {env_path}")
        break
else:
    print("‚ö†Ô∏è No .env file found in expected locations")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')  # Perkelta ƒØ .env failƒÖ

# CHANGE: Add SECRET_KEY validation for production security
if not SECRET_KEY:
    raise ValueError("SECRET_KEY environment variable is required and cannot be empty!")
if len(SECRET_KEY) < 50:
    raise ValueError("SECRET_KEY must be at least 50 characters long for security!")

# SECURITY WARNING: don't run with debug turned on in production!
# CHANGE: Production-optimized DEBUG setting
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

# Production mode detection
PRODUCTION_MODE = os.getenv('PRODUCTION_MODE', 'True').lower() == 'true'
if PRODUCTION_MODE:
    print(f"üöÄ Running in PRODUCTION mode (DEBUG={DEBUG})")
else:
    print(f"üîÑ Running in DEVELOPMENT mode (DEBUG={DEBUG})")

# CHANGE: Production-optimized ALLOWED_HOSTS
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'dienynas.mokyklaatradimai.lt').split(',')

# Add production domain and localhost for development
if not PRODUCTION_MODE:
    local_hosts = ['localhost', '127.0.0.1', '0.0.0.0', 'a-dienynas-backend', 'a-dienynas-frontend', 'a-dienynas-nginx']
    for host in local_hosts:
        if host not in ALLOWED_HOSTS:
            ALLOWED_HOSTS.append(host)
    print(f"üåê ALLOWED_HOSTS: {ALLOWED_HOSTS}")

# Always add localhost for Docker health checks
if 'localhost' not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append('localhost')
if '127.0.0.1' not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append('127.0.0.1')

# CHANGE: Production-optimized CORS settings
CORS_ALLOW_ALL_ORIGINS = os.getenv('CORS_ALLOW_ALL_ORIGINS', 'False').lower() == 'true'
CORS_ALLOW_CREDENTIALS = os.getenv('CORS_ALLOW_CREDENTIALS', 'True').lower() == 'true'

# CSRF Configuration for production HTTPS domains
CSRF_TRUSTED_ORIGINS = [
    f"https://{os.getenv('ALLOWED_HOSTS', 'localhost')}",
    f"http://{os.getenv('ALLOWED_HOSTS', 'localhost')}",
]

# Add development origins if not in production
if not PRODUCTION_MODE:
    CSRF_TRUSTED_ORIGINS.extend([
        "http://localhost:8000",
        "http://127.0.0.1:8000",
        "http://localhost:3000",
        "http://127.0.0.1:3000",
    ])

# Production CORS settings
if not CORS_ALLOW_ALL_ORIGINS:
    CORS_ALLOWED_ORIGINS = [
        f"https://{os.getenv('ALLOWED_HOSTS', 'localhost')}",
        f"http://{os.getenv('ALLOWED_HOSTS', 'localhost')}",
    ]
    # Add development origins if not in production
    if not PRODUCTION_MODE:
        CORS_ALLOWED_ORIGINS.extend([
            "http://localhost:3000",
            "http://127.0.0.1:3000",
        ])
    print(f"üîó CORS_ALLOWED_ORIGINS: {CORS_ALLOWED_ORIGINS}")
else:
    print("üîó CORS: Allowing all origins (development mode)")

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Required for django-allauth
    
    # Local apps
    'users',
    'crm',
    'schedule',
    'curriculum',
    'grades',
    'plans',
    'violation',
    
    
    # Third party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    
    # django-allauth apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
]

# Custom User Model
AUTH_USER_MODEL = 'users.User'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',  # django-allauth middleware
    'users.middleware.RoleValidationMiddleware',  # SEC-011: Secure role validation (after auth)
    'users.oauth_middleware.OAuthCallbackMiddleware',  # OAuth JWT token generation
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Add production-specific middleware
if PRODUCTION_MODE:
    MIDDLEWARE.append('django.middleware.common.BrokenLinkEmailsMiddleware')  # Broken link notifications for production

# SEC-001: Security headers configuration
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# SEC-001: Production security settings
if PRODUCTION_MODE:
    # Configure SSL proxy headers for nginx reverse proxy
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')  # Trust nginx proxy headers
    SECURE_SSL_REDIRECT = False  # Disable SSL redirect - handled by nginx
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'  # Control referrer information
    SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'  # COOP security header

# SEC-001: Content Security Policy - Production optimized
CSP_DEFAULT_SRC = ("'self'",)
if PRODUCTION_MODE:
    # Strict CSP for production
    CSP_SCRIPT_SRC = ("'self'",)  # No inline scripts in production
    CSP_STYLE_SRC = ("'self'",)   # No inline styles in production
else:
    # Relaxed CSP for development
    CSP_SCRIPT_SRC = ("'self'", "'unsafe-inline'")  # Allow inline scripts for development
    CSP_STYLE_SRC = ("'self'", "'unsafe-inline'")   # Allow inline styles for development

CSP_IMG_SRC = ("'self'", "data:", "https:")
CSP_CONNECT_SRC = ("'self'",)
CSP_FONT_SRC = ("'self'",)
CSP_OBJECT_SRC = ("'none'",)
CSP_BASE_URI = ("'self'",)
CSP_FRAME_ANCESTORS = ("'none'",)

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # CHANGE: Pridƒótas templates katalogas slapta≈æod≈æio keitimo formai
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration optimized for production
DATABASES = {
    'default': {
        'ENGINE': os.getenv('DATABASE_ENGINE', 'django.db.backends.postgresql'),
        'NAME': os.getenv('DATABASE_NAME', 'a_dienynas'),
        'USER': os.getenv('POSTGRES_USER', 'a_dienynas_user'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
        'HOST': os.getenv('DATABASE_HOST', 'localhost'),
        'PORT': os.getenv('DATABASE_PORT', '5432'),
        'OPTIONS': {
            'connect_timeout': 20,  # Helpful for Docker connections
            # Production SSL configuration
            'sslmode': 'require' if PRODUCTION_MODE and os.getenv('DATABASE_HOST') not in ['postgres', 'localhost', '127.0.0.1'] else 'prefer',
        } if PRODUCTION_MODE else {},
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'users.authentication.JWTCookieAuthentication',  # SEC-001: Cookie-based authentication
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # Fallback to header-based
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ),
}

# JWT settings with httpOnly cookie support
SIMPLE_JWT = {
    # SEC-001: Shortened access token lifetime for better security
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=int(os.getenv('JWT_ACCESS_TOKEN_LIFETIME', 15))),  # Reduced from 60 to 15 minutes
    'REFRESH_TOKEN_LIFETIME': timedelta(days=int(os.getenv('JWT_REFRESH_TOKEN_LIFETIME', 1))),  # Perkelta ƒØ .env failƒÖ
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    
    'JTI_CLAIM': 'jti',
    
    # SEC-001: Cookie-based authentication settings
    'AUTH_COOKIE_NAME': 'access_token',
    'AUTH_COOKIE_REFRESH_NAME': 'refresh_token',
    'AUTH_COOKIE_ACCESS_MAX_AGE': timedelta(minutes=15),  # Same as ACCESS_TOKEN_LIFETIME
    'AUTH_COOKIE_REFRESH_MAX_AGE': timedelta(days=1),    # Same as REFRESH_TOKEN_LIFETIME
    'AUTH_COOKIE_SECURE': PRODUCTION_MODE,  # True in production, False in development
    'AUTH_COOKIE_HTTP_ONLY': True,   # Prevent XSS attacks
    'AUTH_COOKIE_SAMESITE': 'Lax', # Prevent CSRF attacks, but allow cross-site requests in development
    'AUTH_COOKIE_DOMAIN': None,      # Will be set to production domain in production
    # SEC-001: Allow cookies to work with IP addresses in development
    'AUTH_COOKIE_DOMAIN_DEV': None,  # No domain restriction for development
}

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = '/var/www/static'  # Docker volume mount point

# Additional static files directories for development
STATICFILES_DIRS = [
    BASE_DIR / 'staticfiles',
]

# Production static files security settings
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / os.getenv('MEDIA_ROOT', 'media')  # Perkelta ƒØ .env failƒÖ

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' if PRODUCTION_MODE else 'django.core.mail.backends.console.EmailBackend'

# Production email configuration
if PRODUCTION_MODE:
    EMAIL_HOST = os.getenv('EMAIL_HOST', 'localhost')
    EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
    EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() == 'true'
    EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL', 'False').lower() == 'true'
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
    DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'noreply@mokyklaatradimai.lt')
    SERVER_EMAIL = DEFAULT_FROM_EMAIL
    # Broken link email notifications for production
    MANAGERS = [
        ('Admin', os.getenv('ADMIN_EMAIL', 'admin@mokyklaatradimai.lt')),
    ]
else:
    # Development email configuration
    EMAIL_HOST = os.getenv('EMAIL_HOST', 'localhost')
    EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
    EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() == 'true'
    EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL', 'False').lower() == 'true'
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
    DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'noreply@mokyklaatradimai.lt')
    SERVER_EMAIL = DEFAULT_FROM_EMAIL

# Authentication settings
AUTHENTICATION_BACKENDS = [
    'users.backends.JWTAuthenticationBackend',       # JWT authentication for middleware
    'django.contrib.auth.backends.ModelBackend',     # Traditional Django auth
]

# SEC-001: Session cookie security settings
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = PRODUCTION_MODE  # True in production, False in development
SESSION_COOKIE_SAMESITE = 'Strict'
SESSION_COOKIE_AGE = 86400  # 24 hours
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Session expires when browser closes for better security

# SEC-001: CSRF cookie security settings
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SECURE = PRODUCTION_MODE  # True in production, False in development
CSRF_COOKIE_SAMESITE = 'Strict'

# SEC-001: Enhanced CORS configuration for cookie support
CORS_ALLOW_CREDENTIALS = os.getenv('CORS_ALLOW_CREDENTIALS', 'True').lower() == 'true'

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'detailed': {
            'format': '[{asctime}] {levelname} {name} {funcName}:{lineno} - {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'detailed',
            'level': 'INFO' if PRODUCTION_MODE else 'DEBUG',  # Production-safe logging level
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'INFO' if PRODUCTION_MODE else 'DEBUG',  # Production-safe logging level
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'WARNING' if PRODUCTION_MODE else 'DEBUG',  # Hide SQL queries in production
            'propagate': False,
        },
        'django.security': {
            'handlers': ['console'],
            'level': 'INFO' if PRODUCTION_MODE else 'DEBUG',  # Production-safe logging level
            'propagate': False,
        },
        'rest_framework': {
            'handlers': ['console'],
            'level': 'INFO' if PRODUCTION_MODE else 'DEBUG',  # Production-safe logging level
            'propagate': False,
        },
        'plans': {
            'handlers': ['console'],
            'level': 'INFO' if PRODUCTION_MODE else 'DEBUG',  # Production-safe logging level
            'propagate': False,
        },
        'curriculum': {
            'handlers': ['console'],
            'level': 'INFO' if PRODUCTION_MODE else 'DEBUG',  # Production-safe logging level
            'propagate': False,
        },
        'users': {
            'handlers': ['console'],
            'level': 'INFO' if PRODUCTION_MODE else 'DEBUG',  # Production-safe logging level
            'propagate': False,
        },
        'violation': {
            'handlers': ['console'],
            'level': 'INFO' if PRODUCTION_MODE else 'DEBUG',  # Production-safe logging level
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}
# Production file upload security settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB limit
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB limit
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000  # Prevent DoS via form fields

# Production password hashing security
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',  # Most secure
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.ScryptPasswordHasher',
]

# django-allauth configuration
SITE_ID = 1

# Google OAuth credentials from environment variables
GOOGLE_OAUTH_CLIENT_ID = os.getenv('GOOGLE_OAUTH_CLIENT_ID')
GOOGLE_OAUTH_CLIENT_SECRET = os.getenv('GOOGLE_OAUTH_CLIENT_SECRET')

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Traditional Django auth
    'allauth.account.auth_backends.AuthenticationBackend',  # django-allauth
]

# django-allauth settings
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'none'  # Disable email verification for OAuth
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_SESSION_REMEMBER = True

# Social account settings
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,  # Enhanced security
    }
}

# Custom OAuth callback URL
SOCIALACCOUNT_LOGIN_ON_GET = True

# Override the default callback URL for Google OAuth
SOCIALACCOUNT_PROVIDERS['google']['CALLBACK_URL'] = '/api/users/oauth/google/callback/'

SOCIALACCOUNT_AUTO_SIGNUP = False  # Prevent automatic user creation
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'
SOCIALACCOUNT_QUERY_EMAIL = True
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_ONLY_EMAIL = True

# Login/logout redirect URLs - Dynamic based on environment
LOGIN_REDIRECT_URL = f'https://{os.getenv("ALLOWED_HOSTS", "localhost")}/' if PRODUCTION_MODE else 'http://localhost:3000/'
LOGOUT_REDIRECT_URL = f'https://{os.getenv("ALLOWED_HOSTS", "localhost")}/' if PRODUCTION_MODE else 'http://localhost:3000/'

# django-allauth redirect URLs - Dynamic based on environment
ACCOUNT_LOGIN_REDIRECT_URL = f'https://{os.getenv("ALLOWED_HOSTS", "localhost")}/' if PRODUCTION_MODE else 'http://localhost:3000/'
ACCOUNT_LOGOUT_REDIRECT_URL = f'https://{os.getenv("ALLOWED_HOSTS", "localhost")}/' if PRODUCTION_MODE else 'http://localhost:3000/'
SOCIALACCOUNT_LOGIN_ON_GET = True  # Allow GET requests for social login redirect

# Custom adapters for user management
ACCOUNT_ADAPTER = 'users.adapters.NoNewUsersAccountAdapter'
SOCIALACCOUNT_ADAPTER = 'users.adapters.NoNewSocialUsersAccountAdapter'

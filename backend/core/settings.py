# /backend/core/settings.py
"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
# CHANGE: Optimized for hybrid development mode
# Try multiple .env file locations for flexibility
env_paths = [
    os.path.join(os.path.dirname(__file__), '../../.env'),  # Docker mode
    os.path.join(BASE_DIR.parent, '.env'),  # Hybrid mode (parent of backend/)
    os.path.join(BASE_DIR, '.env'),  # Alternative location
]

for env_path in env_paths:
    if os.path.exists(env_path):
        load_dotenv(env_path)
        print(f"üîß Loaded environment from: {env_path}")
        break
else:
    print("‚ö†Ô∏è No .env file found in expected locations")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')  # Perkelta ƒØ .env failƒÖ

# CHANGE: Add SECRET_KEY validation for production security
if not SECRET_KEY:
    raise ValueError("SECRET_KEY environment variable is required and cannot be empty!")
if len(SECRET_KEY) < 50:
    raise ValueError("SECRET_KEY must be at least 50 characters long for security!")

# SECURITY WARNING: don't run with debug turned on in production!
# CHANGE: Optimized DEBUG setting for hybrid development
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

# Hybrid development mode detection
HYBRID_DEV_MODE = os.getenv('HYBRID_DEV_MODE', 'True').lower() == 'true'
if HYBRID_DEV_MODE:
    print(f"üîÑ Running in HYBRID DEVELOPMENT mode (DEBUG={DEBUG})")
else:
    print(f"üê≥ Running in DOCKER mode (DEBUG={DEBUG})")

# CHANGE: Optimized ALLOWED_HOSTS for hybrid development
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '*').split(',')

# Add localhost variations for hybrid development
if HYBRID_DEV_MODE:
    local_hosts = ['localhost', '127.0.0.1', '0.0.0.0', 'dienynas.mokyklaatradimai.lt', 'a-dienynas-backend', 'a-dienynas-frontend', 'a-dienynas-nginx']
    for host in local_hosts:
        if host not in ALLOWED_HOSTS:
            ALLOWED_HOSTS.append(host)
    print(f"üåê ALLOWED_HOSTS: {ALLOWED_HOSTS}")

# CHANGE: Optimized CORS for hybrid development
CORS_ALLOW_ALL_ORIGINS = os.getenv('CORS_ALLOW_ALL_ORIGINS', 'True').lower() == 'true'
CORS_ALLOW_CREDENTIALS = os.getenv('CORS_ALLOW_CREDENTIALS', 'True').lower() == 'true'

# CSRF Configuration for HTTPS domains
CSRF_TRUSTED_ORIGINS = [
    "https://dienynas.mokyklaatradimai.lt",
    "http://dienynas.mokyklaatradimai.lt",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

# Additional CORS settings for hybrid development
if HYBRID_DEV_MODE:
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:3000",
        "http://127.0.0.1:3000", 
        "https://dienynas.mokyklaatradimai.lt",
        "http://dienynas.mokyklaatradimai.lt",
    ]
    if not CORS_ALLOW_ALL_ORIGINS:
        print(f"üîó CORS_ALLOWED_ORIGINS: {CORS_ALLOWED_ORIGINS}")
    else:
        print("üîó CORS: Allowing all origins (development mode)")

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Local apps
    'users',
    'crm',
    'schedule',
    'curriculum',
    'grades',
    'plans',
    'violation',
    
    
    # Third party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
]

# Custom User Model
AUTH_USER_MODEL = 'users.User'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.common.BrokenLinkEmailsMiddleware',  # CHANGE: Broken link notifications for production
]

# SEC-001: Security headers configuration
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# SEC-001: HSTS headers for production
if not DEBUG:
    # CHANGE: Configure SSL proxy headers for nginx reverse proxy
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_SSL_REDIRECT = False  # CHANGE: Disable SSL redirect - handled by nginx
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

# SEC-001: Content Security Policy
CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = ("'self'", "'unsafe-inline'")  # Allow inline scripts for development
CSP_STYLE_SRC = ("'self'", "'unsafe-inline'")  # Allow inline styles for development
CSP_IMG_SRC = ("'self'", "data:", "https:")
CSP_CONNECT_SRC = ("'self'",)
CSP_FONT_SRC = ("'self'",)
CSP_OBJECT_SRC = ("'none'",)
CSP_BASE_URI = ("'self'",)
CSP_FRAME_ANCESTORS = ("'none'",)

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # CHANGE: Pridƒótas templates katalogas slapta≈æod≈æio keitimo formai
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration optimized for hybrid development
DATABASES = {
    'default': {
        'ENGINE': os.getenv('DATABASE_ENGINE', 'django.db.backends.postgresql'),
        'NAME': os.getenv('DATABASE_NAME', 'a_dienynas'),
        'USER': os.getenv('POSTGRES_USER', 'a_dienynas_user'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
        'HOST': os.getenv('DATABASE_HOST', 'localhost'),  # Works for both Docker and hybrid mode
        'PORT': os.getenv('DATABASE_PORT', '5432'),
        'OPTIONS': {
            'connect_timeout': 20,  # Helpful for Docker connections
            # CHANGE: SSL only for external databases, not for Docker containers
            'sslmode': 'require' if not DEBUG and os.getenv('DATABASE_HOST') not in ['postgres', 'localhost', '127.0.0.1'] else 'prefer',
        } if not DEBUG else {},
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # JWT authentication
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ),
}

# JWT settings with httpOnly cookie support
SIMPLE_JWT = {
    # SEC-001: Shortened access token lifetime for better security
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=int(os.getenv('JWT_ACCESS_TOKEN_LIFETIME', 15))),  # Reduced from 60 to 15 minutes
    'REFRESH_TOKEN_LIFETIME': timedelta(days=int(os.getenv('JWT_REFRESH_TOKEN_LIFETIME', 1))),  # Perkelta ƒØ .env failƒÖ
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    
    'JTI_CLAIM': 'jti',
    
    # Cookie Security Configuration
    'AUTH_COOKIE_SECURE': not DEBUG,  # True in production, False in development
    'AUTH_COOKIE_HTTP_ONLY': True,
    'AUTH_COOKIE_SAMESITE': 'Lax',
}

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / os.getenv('STATIC_ROOT', 'static')  # Perkelta ƒØ .env failƒÖ

# Additional static files directories for development
STATICFILES_DIRS = [
    BASE_DIR / 'staticfiles',
]

# CHANGE: Add static files security settings for production
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / os.getenv('MEDIA_ROOT', 'media')  # Perkelta ƒØ .env failƒÖ

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' if not DEBUG else 'django.core.mail.backends.console.EmailBackend'

# CHANGE: Add production email configuration
if not DEBUG:
    EMAIL_HOST = os.getenv('EMAIL_HOST', 'localhost')
    EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
    EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() == 'true'
    EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL', 'False').lower() == 'true'
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
    DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'noreply@mokyklaatradimai.lt')
    SERVER_EMAIL = DEFAULT_FROM_EMAIL
    # CHANGE: Broken link email notifications for production
    MANAGERS = [
        ('Admin', os.getenv('ADMIN_EMAIL', 'admin@mokyklaatradimai.lt')),
    ]

# CHANGE: Email configuration for both development and production
EMAIL_HOST = os.getenv('EMAIL_HOST', 'localhost')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL', 'False').lower() == 'true'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'noreply@mokyklaatradimai.lt')
SERVER_EMAIL = DEFAULT_FROM_EMAIL

# Authentication settings
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

# SEC-001: Session cookie security settings
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = not DEBUG  # True in production, False in development
SESSION_COOKIE_SAMESITE = 'Strict'
SESSION_COOKIE_AGE = 86400  # 24 hours
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # CHANGE: Session expires when browser closes for better security

# SEC-001: CSRF cookie security settings
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SECURE = not DEBUG  # True in production, False in development
CSRF_COOKIE_SAMESITE = 'Strict'
CSRF_TRUSTED_ORIGINS = [
    "https://dienynas.mokyklaatradimai.lt",
    "http://dienynas.mokyklaatradimai.lt",
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

# SEC-001: Enhanced CORS configuration for cookie support
CORS_ALLOW_CREDENTIALS = os.getenv('CORS_ALLOW_CREDENTIALS', 'False').lower() == 'true'

# CHANGE: Use environment variable for CORS_ALLOWED_ORIGINS
if not CORS_ALLOW_ALL_ORIGINS:
    cors_origins = os.getenv('CORS_ALLOWED_ORIGINS', '').split(',')
    CORS_ALLOWED_ORIGINS = [origin.strip() for origin in cors_origins if origin.strip()]
    if not CORS_ALLOWED_ORIGINS:
        # Fallback to default origins if none specified
        CORS_ALLOWED_ORIGINS = [
            "https://dienynas.mokyklaatradimai.lt",
            "http://dienynas.mokyklaatradimai.lt",
            "http://localhost:3000",
            "http://127.0.0.1:3000",
        ]

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'detailed': {
            'format': '[{asctime}] {levelname} {name} {funcName}:{lineno} - {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'detailed',
            'level': 'INFO' if not DEBUG else 'DEBUG',  # CHANGE: Production-safe logging level
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'INFO' if not DEBUG else 'DEBUG',  # CHANGE: Production-safe logging level
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'WARNING' if not DEBUG else 'DEBUG',  # CHANGE: Hide SQL queries in production
            'propagate': False,
        },
        'django.security': {
            'handlers': ['console'],
            'level': 'INFO' if not DEBUG else 'DEBUG',  # CHANGE: Production-safe logging level
            'propagate': False,
        },
        'rest_framework': {
            'handlers': ['console'],
            'level': 'INFO' if not DEBUG else 'DEBUG',  # CHANGE: Production-safe logging level
            'propagate': False,
        },
        'plans': {
            'handlers': ['console'],
            'level': 'INFO' if not DEBUG else 'DEBUG',  # CHANGE: Production-safe logging level
            'propagate': False,
        },
        'curriculum': {
            'handlers': ['console'],
            'level': 'INFO' if not DEBUG else 'DEBUG',  # CHANGE: Production-safe logging level
            'propagate': False,
        },
        'users': {
            'handlers': ['console'],
            'level': 'INFO' if not DEBUG else 'DEBUG',  # CHANGE: Production-safe logging level
            'propagate': False,
        },
        'violation': {
            'handlers': ['console'],
            'level': 'INFO' if not DEBUG else 'DEBUG',  # CHANGE: Production-safe logging level
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}

# CHANGE: Add additional security settings for production
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'  # Control referrer information
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'  # COOP security header

# CHANGE: Add file upload security settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB limit
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB limit
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000  # Prevent DoS via form fields

# CHANGE: Add password hashing security
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',  # Most secure
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.ScryptPasswordHasher',
]
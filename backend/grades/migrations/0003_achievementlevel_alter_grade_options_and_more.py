# Generated by Django 5.2.4 on 2025-08-22 16:09

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('curriculum', '0005_lesson_deleted_at_lesson_is_deleted'),
        ('grades', '0002_initial'),
        ('plans', '0005_alter_imuplan_attendance_status_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AchievementLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(choices=[('S', 'Slenkstinis'), ('B', 'Bazinis'), ('P', 'Pagrindinis'), ('A', 'Aukštesnysis')], help_text='Pasiekimų lygio kodas: S, B, P, A', max_length=1, unique=True, verbose_name='Kodas')),
                ('name', models.CharField(help_text='Pasiekimų lygio pavadinimas', max_length=50, verbose_name='Pavadinimas')),
                ('min_percentage', models.IntegerField(help_text='Minimalus procentas šiam lygiui', verbose_name='Minimalus procentas')),
                ('max_percentage', models.IntegerField(help_text='Maksimalus procentas šiam lygiui', verbose_name='Maksimalus procentas')),
                ('color', models.CharField(help_text="Spalva frontend'e: žalias, mėlynas, oranžinis, raudonas", max_length=20, verbose_name='Spalva')),
                ('description', models.TextField(blank=True, help_text='Pasiekimų lygio aprašymas', verbose_name='Aprašymas')),
            ],
            options={
                'verbose_name': 'Pasiekimų lygis',
                'verbose_name_plural': 'Pasiekimų lygiai',
                'ordering': ['min_percentage'],
            },
        ),
        migrations.AlterModelOptions(
            name='grade',
            options={'ordering': ['-created_at'], 'verbose_name': 'Vertinimas', 'verbose_name_plural': 'Vertinimai'},
        ),
        migrations.AlterUniqueTogether(
            name='grade',
            unique_together=set(),
        ),
        migrations.AddField(
            model_name='grade',
            name='imu_plan',
            field=models.ForeignKey(blank=True, help_text='Susiejimas su individualiu mokinio ugdymo planu', null=True, on_delete=django.db.models.deletion.CASCADE, to='plans.imuplan', verbose_name='IMU Planas'),
        ),
        migrations.AlterField(
            model_name='grade',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, help_text='Vertinimo sukūrimo laikas', verbose_name='Sukurta'),
        ),
        migrations.AlterField(
            model_name='grade',
            name='lesson',
            field=models.ForeignKey(help_text='Pamoka, už kurią duodamas vertinimas', on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='curriculum.lesson', verbose_name='Pamoka'),
        ),
        migrations.AlterField(
            model_name='grade',
            name='mentor',
            field=models.ForeignKey(help_text='Mentorius, kuris duoda vertinimą', on_delete=django.db.models.deletion.CASCADE, related_name='grades_given', to=settings.AUTH_USER_MODEL, verbose_name='Mentorius'),
        ),
        migrations.AlterField(
            model_name='grade',
            name='notes',
            field=models.TextField(blank=True, help_text='Papildomos pastabos apie vertinimą', verbose_name='Pastabos'),
        ),
        migrations.AlterField(
            model_name='grade',
            name='student',
            field=models.ForeignKey(help_text='Mokinys, kuriam duodamas vertinimas', on_delete=django.db.models.deletion.CASCADE, related_name='grades_received', to=settings.AUTH_USER_MODEL, verbose_name='Mokinys'),
        ),
        migrations.AlterField(
            model_name='grade',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, help_text='Vertinimo atnaujinimo laikas', verbose_name='Atnaujinta'),
        ),
        migrations.AlterUniqueTogether(
            name='grade',
            unique_together={('student', 'lesson', 'imu_plan')},
        ),
        migrations.AddField(
            model_name='grade',
            name='achievement_level',
            field=models.ForeignKey(blank=True, help_text='Automatiškai nustatomas pagal procentus', null=True, on_delete=django.db.models.deletion.CASCADE, to='grades.achievementlevel', verbose_name='Pasiekimų lygis'),
        ),
        migrations.CreateModel(
            name='GradeCalculation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage', models.IntegerField(help_text='Įvesti procentai', verbose_name='Procentai')),
                ('calculation_date', models.DateTimeField(auto_now_add=True, help_text='Kada buvo atliktas skaičiavimas', verbose_name='Skaičiavimo data')),
                ('calculated_level', models.ForeignKey(help_text='Automatiškai apskaičiuotas pasiekimų lygis', on_delete=django.db.models.deletion.CASCADE, to='grades.achievementlevel', verbose_name='Apskaičiuotas lygis')),
            ],
            options={
                'verbose_name': 'Pasiekimų lygio skaičiavimas',
                'verbose_name_plural': 'Pasiekimų lygių skaičiavimai',
                'ordering': ['-calculation_date'],
            },
        ),
    ]

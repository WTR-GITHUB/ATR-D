# env.docker.example

# Docker environment variables example file for A-DIENYNAS system
# CHANGE: Created example environment file for Docker deployment configuration

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# PostgreSQL Database
POSTGRES_PASSWORD=change_this_password_to_something_secure
POSTGRES_DB=a_dienynas
POSTGRES_USER=a_dienynas_user
POSTGRES_HOST=postgres
POSTGRES_PORT=5432

# Redis Cache (Optional)
REDIS_PASSWORD=change_this_redis_password
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_DB=0

# =============================================================================
# DJANGO BACKEND CONFIGURATION
# =============================================================================

# Django Core Settings
SECRET_KEY=change_this_to_a_super_secure_secret_key_at_least_50_characters_long
DEBUG=False
ALLOWED_HOSTS=localhost,127.0.0.1,your_domain.com,192.168.1.166

# Database Engine (PostgreSQL for production)
DATABASE_ENGINE=django.db.backends.postgresql
DATABASE_NAME=a_dienynas
DATABASE_USER=a_dienynas_user
DATABASE_PASSWORD=${POSTGRES_PASSWORD}
DATABASE_HOST=postgres
DATABASE_PORT=5432

# CORS Settings
CORS_ALLOW_ALL_ORIGINS=False
CORS_ALLOWED_ORIGINS=https://yourdomain.com,https://www.yourdomain.com,http://localhost:3000
CORS_ALLOW_CREDENTIALS=True

# Static and Media Files
STATIC_URL=/static/
STATIC_ROOT=/app/static
MEDIA_URL=/media/
MEDIA_ROOT=/app/media

# JWT Settings
JWT_ACCESS_TOKEN_LIFETIME=60
JWT_REFRESH_TOKEN_LIFETIME=1440

# Email Configuration (SMTP)
EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_HOST_USER=your-email@gmail.com
EMAIL_HOST_PASSWORD=your-app-password
EMAIL_USE_TLS=True
EMAIL_USE_SSL=False
DEFAULT_FROM_EMAIL=your-email@gmail.com

# =============================================================================
# FRONTEND CONFIGURATION
# =============================================================================

# Next.js Frontend
NEXT_PUBLIC_API_URL=http://localhost/api
NEXT_PUBLIC_APP_NAME=A-DIENYNAS
NEXT_PUBLIC_VERSION=1.0.0
NEXT_PUBLIC_ENVIRONMENT=production

# =============================================================================
# NGINX CONFIGURATION
# =============================================================================

# SSL/HTTPS Settings
SSL_CERT_PATH=/etc/nginx/ssl/cert.pem
SSL_KEY_PATH=/etc/nginx/ssl/key.pem
SSL_ENABLED=False

# Domain Configuration
DOMAIN_NAME=yourdomain.com
WWW_DOMAIN=www.yourdomain.com

# =============================================================================
# DOCKER CONFIGURATION
# =============================================================================

# Container Names
BACKEND_CONTAINER_NAME=a-dienynas-backend
FRONTEND_CONTAINER_NAME=a-dienynas-frontend
DATABASE_CONTAINER_NAME=a-dienynas-postgres
REDIS_CONTAINER_NAME=a-dienynas-redis
NGINX_CONTAINER_NAME=a-dienynas-nginx

# Port Mappings
FRONTEND_PORT=3000
BACKEND_PORT=8000
DATABASE_PORT=5432
REDIS_PORT=6379
NGINX_HTTP_PORT=80
NGINX_HTTPS_PORT=443

# Volume Names
POSTGRES_DATA_VOLUME=a-dienynas_postgres_data
STATIC_VOLUME=a-dienynas_static_volume
MEDIA_VOLUME=a-dienynas_media_volume

# =============================================================================
# BACKUP CONFIGURATION
# =============================================================================

# Backup Settings
BACKUP_RETENTION_DAYS=7
BACKUP_COMPRESSION_LEVEL=6
BACKUP_DIR=./backups

# Automated Backup Schedule (Cron)
DAILY_BACKUP_TIME=02:00
WEEKLY_BACKUP_TIME=03:00
WEEKLY_BACKUP_DAY=0

# =============================================================================
# MONITORING AND LOGGING
# =============================================================================

# Log Levels
DJANGO_LOG_LEVEL=INFO
NGINX_LOG_LEVEL=info
FRONTEND_LOG_LEVEL=info

# Log Retention
LOG_RETENTION_DAYS=30
LOG_MAX_SIZE=10m
LOG_MAX_FILES=3

# Health Check Settings
HEALTH_CHECK_INTERVAL=30s
HEALTH_CHECK_TIMEOUT=10s
HEALTH_CHECK_RETRIES=3

# =============================================================================
# SECURITY SETTINGS
# =============================================================================

# Password Policy
MIN_PASSWORD_LENGTH=8
PASSWORD_COMPLEXITY_REQUIRED=True

# Session Security
SESSION_COOKIE_SECURE=True
CSRF_COOKIE_SECURE=True
SESSION_COOKIE_HTTPONLY=True
CSRF_COOKIE_HTTPONLY=True

# Rate Limiting
RATE_LIMIT_REQUESTS_PER_MINUTE=100
RATE_LIMIT_BURST_SIZE=20

# =============================================================================
# PERFORMANCE SETTINGS
# =============================================================================

# Gunicorn Workers
GUNICORN_WORKERS=3
GUNICORN_THREADS=2
GUNICORN_TIMEOUT=120
GUNICORN_KEEPALIVE=2
GUNICORN_MAX_REQUESTS=1000
GUNICORN_MAX_REQUESTS_JITTER=100

# Database Connection Pool
DB_CONN_MAX_AGE=600
DB_CONN_MAX_AGE_OPTIONS=300

# Cache Settings
CACHE_TIMEOUT=300
CACHE_MAX_ENTRIES=1000

# =============================================================================
# DEVELOPMENT OVERRIDES
# =============================================================================

# Uncomment these lines for development environment
# DEBUG=True
# CORS_ALLOW_ALL_ORIGINS=True
# ALLOWED_HOSTS=*
# DATABASE_ENGINE=django.db.backends.sqlite3
# DATABASE_NAME=db.sqlite3

# =============================================================================
# NOTES
# =============================================================================

# IMPORTANT: 
# 1. Copy this file to .env.docker and fill in your actual values
# 2. Never commit .env.docker to version control
# 3. Use strong, unique passwords for production
# 4. Update domain names to match your actual domain
# 5. Configure SSL certificates for production use
# 6. Test all settings in staging environment first

# For production deployment:
# - Set DEBUG=False
# - Use strong SECRET_KEY
# - Configure proper CORS origins
# - Enable SSL/HTTPS
# - Set up proper email configuration
# - Configure backup automation
# - Set up monitoring and alerting

# A-DIENYNAS Project Documentation

## PROJECT OVERVIEW

**A-DIENYNAS** is a modern student diary and learning management system built with Django REST API backend and Next.js frontend. As noted in README.md, the system is designed for "effective learning process organization" and includes management of five user types:

- **Students** - for learning progress tracking
- **Parents** - for monitoring children's progress  
- **Curators** - for student management and consulting
- **Mentors** - for subject teaching and evaluation
- **Administrators** - for complete system management

The system implements JWT authentication, modern responsive user interface, real-time updates, and RESTful API architecture.

### Technical Architecture

#### Backend (Django)

Technical implementation is based on modular Django application architecture, where `backend/core/settings.py` specifies **six local applications**:

- `users` - user management
- `crm` - customer relationship management
- `schedule` - timetables
- `curriculum` - learning programs
- `grades` - grades
- `plans` - educational plans

#### API Structure

`backend/core/urls.py` shows API endpoint structure where each application has its own URL namespace:

```
/api/crm/
/api/schedule/
/api/curriculum/
/api/grades/
/api/plans/
```

#### Authentication

Authentication implemented through Django Simple JWT with:
- Bearer token mechanism
- 60-minute access token validity
- SQLite database in development environment
- Configured CORS support for frontend-backend communication

#### Frontend (Next.js)

Frontend implemented with:
- **Next.js 15** with App Router architecture
- **TypeScript** for type safety
- **Tailwind CSS** for styling
- **Zustand** state management
- **Axios** HTTP client for backend communication
- Automatic API proxying: `/api/:path*` → `http://localhost:8000/api/:path*`

### Functionality Spectrum

Documented in README.md and FILE_STRUCTURE.md, functionality includes:

- Subject and level organization
- Student progress tracking
- Parent and curator relationship management
- Mentor and subject linking

### Data Structures

ADDITIONAL folder analysis shows system data structure complexity - there are **import scripts** for:

- Competencies
- Skills
- Virtues
- Lessons
- Students
- Subjects
- Learning levels

This indicates comprehensive educational system modeling with complex data structures.

## PERSONALITY

**A-DIENYNAS** is designed as a comprehensive educational management platform that prioritizes:
- **Simplicity in complexity** - handling complex educational data through intuitive interfaces
- **Role-based functionality** - each user type has tailored features and access levels
- **Data-driven insights** - extensive tracking and reporting capabilities
- **Modern development practices** - clean architecture, type safety, and maintainable code

## TECH STACK

### Backend Architecture

Backend architecture is based on **Django 5.2.4** framework with **Django REST Framework 3.16.0** for RESTful API development. System uses **SQLite database** (`django.db.backends.sqlite3`) in development environment, and authentication is implemented through **Django Simple JWT 5.5.1** with Bearer token mechanism. 

Backend consists of modularly organized Django applications: `users` (user management), `crm` (student-parent-curator relationship management), `curriculum` (learning programs), `plans` (educational plans), `grades` (grades), and `schedule` (timetables). 

CORS functionality is ensured through **django-cors-headers 4.3.1**, and additional security solutions include custom password validators with minimum 8-character requirement. System is configured for development mode with `DEBUG = True` and allowed all hosts and CORS origins.

### Frontend Technology Stack

Frontend technology solution is based on **Next.js 15.4.5** with App Router architecture and **React 19.1.0**. Project is fully written in **TypeScript 5** with ES2017 target configuration and strict mode enabled. 

UI layer is implemented through **Tailwind CSS 4** with PostCSS processing, and state management is performed by **Zustand 5.0.7** library. HTTP communication with backend is executed through **Axios 1.11.0** with automatic API proxying configuration (`/api/:path*` → `http://localhost:8000/api/:path*`). 

For form management, **React Hook Form 7.61.1** is used, and for UI components - **Radix UI primitives**, **Lucide React** for icons, and **clsx/tailwind-merge** utility libraries. Development environment has **Turbopack bundler** enabled through `next dev --turbopack` command, and code quality is ensured by **ESLint 9** with Next.js specific rules.

## ERROR FIXING PROCESS

When encountering errors, follow this systematic approach:

1. **Start by writing 3 reasoning paragraphs analyzing what the error might be**
   - DO NOT JUMP TO CONCLUSIONS
   - Analyze symptoms, context, and potential causes
   - Consider recent changes and system interactions

2. **Write reasoning paragraphs** that explore:
   - What specific error messages or behaviors are observed
   - What components or systems might be involved
   - What conditions or inputs might trigger the issue

3. **Answer in short** - provide concise solution in a few sentences

4. **DO NOT DELETE COMMENTS** - preserve existing code documentation

5. **Provide summary of current state** after implementing fixes

## BUILDING PROCESS

### Summary of Current State Requirements

Before proceeding with any development, provide a summary of the current project state.

#### Instructions

Format as **3 concise paragraphs** describing:

- What we just did
- What did not work
- Which files were updated/created
- What mistakes to avoid
- Any key insights/lessons learned
- What problems/errors we are facing
- Anything else a programmer needs to work productively on this project

#### Requirements

- Write in **conversational yet informative tone**
- Similar to a GitHub README that is super information dense
- **Without any fluff or noise**
- **DO NOT** include assumptions or theories, just facts
- Expect **three concise paragraphs**
- Written as if giving instructions to another programmer with ALL necessary context

#### Template Format

```markdown
**Paragraph 1:** [What was accomplished and current status]

**Paragraph 2:** [Issues encountered and solutions/workarounds]

**Paragraph 3:** [Next steps and critical information for continued development]
```

## OUR .ENV VARIABLES

*Environment variables documentation to be added as needed*

# CURRENT FILE STRUCTURE
.
├── ADITIONAL
│   ├── competencies.json
│   ├── competency_atcheve_example.json
│   ├── competency_example.json
│   ├── generate_student_subject_levels.py
│   ├── import_competencies.py
│   ├── import_competency_atcheves.py
│   ├── import_lessons.py
│   ├── import_levels.py
│   ├── import_skills.py
│   ├── import_students.py
│   ├── import_subjects_levels.py
│   ├── import_subjects.py
│   ├── import_virtues.py
│   ├── lesson_example.json
│   ├── lesson_json_documentation.md
│   ├── levels.json
│   ├── README_competencies.md
│   ├── skill_example.json
│   ├── students.json
│   ├── subjects.json
│   └── virtues.json
├── backend
│   ├── core
│   │   ├── asgi.py
│   │   ├── __init__.py
│   │   ├── __pycache__
│   │   │   ├── __init__.cpython-312.pyc
│   │   │   ├── settings.cpython-312.pyc
│   │   │   ├── urls.cpython-312.pyc
│   │   │   └── wsgi.cpython-312.pyc
│   │   ├── settings.py
│   │   ├── urls.py
│   │   └── wsgi.py
│   ├── crm
│   │   ├── admin.py
│   │   ├── apps.py
│   │   ├── __init__.py
│   │   ├── migrations
│   │   │   ├── 0001_initial.py
│   │   │   ├── 0002_initial.py
│   │   │   ├── __init__.py
│   │   │   └── __pycache__
│   │   ├── models.py
│   │   ├── __pycache__
│   │   │   ├── admin.cpython-312.pyc
│   │   │   ├── apps.cpython-312.pyc
│   │   │   ├── __init__.cpython-312.pyc
│   │   │   ├── models.cpython-312.pyc
│   │   │   ├── serializers.cpython-312.pyc
│   │   │   ├── urls.cpython-312.pyc
│   │   │   └── views.cpython-312.pyc
│   │   ├── serializers.py
│   │   ├── tests.py
│   │   ├── urls.py
│   │   └── views.py
│   ├── curriculum
│   │   ├── admin.py
│   │   ├── apps.py
│   │   ├── __init__.py
│   │   ├── migrations
│   │   │   ├── 0001_initial.py
│   │   │   ├── 0002_initial.py
│   │   │   ├── 0003_remove_lesson_description_lesson_content.py
│   │   │   ├── 0004_remove_old_lesson_fields.py
│   │   │   ├── __init__.py
│   │   │   └── __pycache__
│   │   ├── models.py
│   │   ├── __pycache__
│   │   │   ├── admin.cpython-312.pyc
│   │   │   ├── apps.cpython-312.pyc
│   │   │   ├── __init__.cpython-312.pyc
│   │   │   ├── models.cpython-312.pyc
│   │   │   ├── serializers.cpython-312.pyc
│   │   │   ├── urls.cpython-312.pyc
│   │   │   └── views.cpython-312.pyc
│   │   ├── serializers.py
│   │   ├── tests.py
│   │   ├── urls.py
│   │   └── views.py
│   ├── db.sqlite3
│   ├── db.sqlite3.backup
│   ├── grades
│   │   ├── admin.py
│   │   ├── apps.py
│   │   ├── __init__.py
│   │   ├── migrations
│   │   │   ├── 0001_initial.py
│   │   │   ├── 0002_initial.py
│   │   │   ├── __init__.py
│   │   │   └── __pycache__
│   │   ├── models.py
│   │   ├── __pycache__
│   │   │   ├── admin.cpython-312.pyc
│   │   │   ├── apps.cpython-312.pyc
│   │   │   ├── __init__.cpython-312.pyc
│   │   │   ├── models.cpython-312.pyc
│   │   │   ├── serializers.cpython-312.pyc
│   │   │   ├── urls.cpython-312.pyc
│   │   │   └── views.cpython-312.pyc
│   │   ├── serializers.py
│   │   ├── tests.py
│   │   ├── urls.py
│   │   └── views.py
│   ├── manage.py
│   ├── plans
│   │   ├── admin.py
│   │   ├── apps.py
│   │   ├── __init__.py
│   │   ├── migrations
│   │   │   ├── 0001_initial.py
│   │   │   ├── __init__.py
│   │   │   └── __pycache__
│   │   ├── models.py
│   │   ├── __pycache__
│   │   │   ├── admin.cpython-312.pyc
│   │   │   ├── apps.cpython-312.pyc
│   │   │   ├── __init__.cpython-312.pyc
│   │   │   ├── models.cpython-312.pyc
│   │   │   ├── serializers.cpython-312.pyc
│   │   │   ├── urls.cpython-312.pyc
│   │   │   └── views.cpython-312.pyc
│   │   ├── serializers.py
│   │   ├── tests.py
│   │   ├── urls.py
│   │   └── views.py
│   ├── schedule
│   │   ├── admin.py
│   │   ├── apps.py
│   │   ├── __init__.py
│   │   ├── migrations
│   │   │   ├── 0001_initial.py
│   │   │   ├── 0002_initial.py
│   │   │   ├── 0003_add_period_name_field.py
│   │   │   ├── 0004_limit_user_to_mentors.py
│   │   │   ├── 0005_remove_limit_choices_to.py
│   │   │   ├── 0006_make_weekday_auto_and_lesson_optional.py
│   │   │   ├── 0007_change_period_ordering_to_starttime.py
│   │   │   ├── 0008_remove_globalschedule_lesson.py
│   │   │   ├── __init__.py
│   │   │   └── __pycache__
│   │   ├── models.py
│   │   ├── __pycache__
│   │   │   ├── admin.cpython-312.pyc
│   │   │   ├── apps.cpython-312.pyc
│   │   │   ├── __init__.cpython-312.pyc
│   │   │   ├── models.cpython-312.pyc
│   │   │   ├── serializers.cpython-312.pyc
│   │   │   ├── urls.cpython-312.pyc
│   │   │   └── views.cpython-312.pyc
│   │   ├── serializers.py
│   │   ├── tests.py
│   │   ├── urls.py
│   │   └── views.py
│   └── users
│       ├── admin.py
│       ├── apps.py
│       ├── __init__.py
│       ├── migrations
│       │   ├── 0001_initial.py
│       │   ├── __init__.py
│       │   └── __pycache__
│       ├── models.py
│       ├── __pycache__
│       │   ├── admin.cpython-312.pyc
│       │   ├── apps.cpython-312.pyc
│       │   ├── __init__.cpython-312.pyc
│       │   ├── models.cpython-312.pyc
│       │   ├── serializers.cpython-312.pyc
│       │   ├── urls.cpython-312.pyc
│       │   └── views.cpython-312.pyc
│       ├── serializers.py
│       ├── tests.py
│       ├── urls.py
│       └── views.py
├── backup_before_reorganization.json
├── .cursor
│   └── rules
├── .cursorignore
├── .cursorrules
├── DOC
│   ├── DATA-TABLE-COMPONENT.md
│   ├── FILE_STRUCTURE.md
│   └── MCP.md
├── frontend
│   ├── eslint.config.mjs
│   ├── .gitignore
│   ├── .next
│   │   ├── app-build-manifest.json
│   │   ├── build
│   │   │   └── chunks
│   │   ├── build-manifest.json
│   │   ├── cache
│   │   │   ├── eslint
│   │   │   ├── .previewinfo
│   │   │   ├── .rscinfo
│   │   │   ├── swc
│   │   │   ├── .tsbuildinfo
│   │   │   └── webpack
│   │   ├── diagnostics
│   │   │   ├── build-diagnostics.json
│   │   │   └── framework.json
│   │   ├── fallback-build-manifest.json
│   │   ├── package.json
│   │   ├── postcss.js
│   │   ├── postcss.js.map
│   │   ├── prerender-manifest.json
│   │   ├── react-loadable-manifest.json
│   │   ├── routes-manifest.json
│   │   ├── server
│   │   │   ├── app
│   │   │   ├── app-paths-manifest.json
│   │   │   ├── chunks
│   │   │   ├── interception-route-rewrite-manifest.js
│   │   │   ├── middleware-build-manifest.js
│   │   │   ├── middleware-manifest.json
│   │   │   ├── middleware-react-loadable-manifest.js
│   │   │   ├── next-font-manifest.js
│   │   │   ├── next-font-manifest.json
│   │   │   ├── pages
│   │   │   ├── pages-manifest.json
│   │   │   ├── server-reference-manifest.js
│   │   │   ├── server-reference-manifest.json
│   │   │   └── webpack-runtime.js
│   │   ├── static
│   │   │   ├── chunks
│   │   │   ├── css
│   │   │   ├── development
│   │   │   ├── media
│   │   │   └── WCty7HCfqXOnt5i8a7Nce
│   │   ├── trace
│   │   └── types
│   │       ├── app
│   │       ├── cache-life.d.ts
│   │       └── package.json
│   ├── next.config.ts
│   ├── next-env.d.ts
│   ├── OPTIMIZATION.md
│   ├── package.json
│   ├── package-lock.json
│   ├── postcss.config.mjs
│   ├── public
│   │   ├── dataTables.js
│   │   ├── file.svg
│   │   ├── globe.svg
│   │   ├── jquery-3.7.1.js
│   │   ├── next.svg
│   │   ├── vercel.svg
│   │   └── window.svg
│   ├── README.md
│   ├── src
│   │   ├── app
│   │   │   ├── admin
│   │   │   ├── auth
│   │   │   ├── dashboard
│   │   │   ├── favicon.ico
│   │   │   ├── globals.css
│   │   │   ├── layout.tsx
│   │   │   └── page.tsx
│   │   ├── components
│   │   │   ├── auth
│   │   │   ├── dashboard
│   │   │   ├── DataTable
│   │   │   ├── forms
│   │   │   ├── layout
│   │   │   └── ui
│   │   ├── hooks
│   │   │   ├── useAuth.ts
│   │   │   ├── useCurriculum.ts
│   │   │   ├── useGrades.ts
│   │   │   ├── useLevels.ts
│   │   │   ├── usePeriods.ts
│   │   │   └── useSchedule.ts
│   │   ├── lib
│   │   │   ├── api.ts
│   │   │   ├── types.ts
│   │   │   └── utils.ts
│   │   ├── styles
│   │   │   └── datatables.css
│   │   └── types
│   │       └── jquery.d.ts
│   ├── tsconfig.json
│   └── tsconfig.tsbuildinfo
├── .gitignore
├── package.json
├── package-lock.json
├── README.md
├── requirements.txt
└── venv
    ├── bin
    │   ├── activate
    │   ├── activate.csh
    │   ├── activate.fish
    │   ├── Activate.ps1
    │   ├── django-admin
    │   ├── normalizer
    │   ├── pip
    │   ├── pip3
    │   ├── pip3.12
    │   ├── python -> python3
    │   ├── python3 -> /usr/bin/python3
    │   ├── python3.12 -> python3
    │   └── sqlformat
    ├── include
    │   └── python3.12
    ├── lib
    │   └── python3.12
    │       └── site-packages
    ├── lib64 -> lib
    └── pyvenv.cfg

tree -L 4 -a -I 'node_modules|.git|pycache|.DS_Store|pytest_cache|.vscode'

## GITHUB PUSH PROCESS

*Git workflow documentation to be added as needed*

## IMPORTANT

**Key principles for working with A-DIENYNAS:**

1. **Always maintain data integrity** - educational data is critical
2. **Respect user roles** - implement proper permission checks
3. **Document all changes** - especially database migrations and API changes
4. **Test authentication flows** - JWT token handling is crucial
5. **Follow TypeScript patterns** - maintain type safety throughout frontend
6. **Keep API endpoints RESTful** - follow established URL patterns
7. **Preserve existing comments** - they contain important context
8. **Use modular architecture** - maintain separation between Django apps
9. **Handle errors gracefully** - provide meaningful feedback to users
10. **Prioritize performance** - educational systems need to be responsive

### MANDATORY FILE CREATION/EDITING RULES

**When creating or editing ANY file, ALWAYS REQUIRED:**

1. **Line 1:** Must contain the file path and filename
   ```
   # /path/to/filename.ext
   ```

2. **Line 3 onwards:** Must provide a concise description of the file's purpose
   ```
   # Brief description of what this file does, its role in the project,
   # and any important context for other developers
   ```

3. **After file description:** Must include a brief change summary and reason (on new line)
   ```
   # CHANGE: Brief description of what was modified/added and why
   ```

**Example format:**
```python
# backend/users/models.py

# User management models for A-DIENYNAS system
# Defines custom user model with role-based permissions for students, parents, curators, mentors, and administrators
# CHANGE: Added role-based permissions field to User model to support mentor assignment functionality
```

**This rule applies to ALL file types:** Python, TypeScript, JavaScript, CSS, HTML, JSON, Markdown, configuration files, etc.

**Purpose:** Ensures every file is immediately identifiable, its purpose is clear, and recent changes are documented for any developer working on the project.

### DOCUMENTATION STORAGE RULE

**All documentation created upon request or following project guidelines must be stored in the `/DOC` folder.**

This includes:
- API documentation
- Component documentation  
- Process guides
- Technical specifications
- Architecture documents
- User guides
- Development workflows
- Any other project documentation

**File naming convention for documentation:**
```
/DOC/COMPONENT_NAME.md
/DOC/PROCESS_NAME.md  
/DOC/API_ENDPOINT_NAME.md
```

**Purpose:** Centralizes all project documentation in one location for easy access and maintenance.